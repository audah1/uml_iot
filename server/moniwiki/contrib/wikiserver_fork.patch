diff --git a/wikihttpd.php b/wikihttpd.php
index 2dadd50..2e331e5 100644
--- a/wikihttpd.php
+++ b/wikihttpd.php
@@ -62,6 +62,34 @@ class simple_server {
     if(@socket_listen($this->socket, 5)< 0)
       return false;
 
+    /* fork */
+    $pid = pcntl_fork();
+    if($pid == -1) {
+      return false;
+    } else if($pid) {
+      /* I'm the parent. Not needed anymore */
+      exit();
+    }
+
+    /* Make sure fork()ed children exit immediately - otherwise we have
+       a bunch of <defunct> processes. This is not the best way of doing
+       it: I'd rather prefer to keep track of my child processes (which
+       would for example allow me to limit the number of connections -
+       currently this server will accept connections until your machine
+       cannot handle it anymore). Any UNIX gurus out there?  */
+
+    pcntl_signal(SIGCHLD, SIG_IGN);
+
+    /* make session leader */
+    /*
+    if (!posix_setsid())
+      return false;
+
+    $info = posix_getpwnam($this->user);
+    if (!posix_setuid($info['uid']))
+      return false;
+    */
+
 #    $this->error_handle = @fopen($this->error_file, "a");
 #    if(!$this->error_handle) 
 #      return false;
@@ -73,7 +101,6 @@ class simple_server {
     if($this->post_init() === false)
       return false;
 
-    register_shutdown_function(array(&$this,'close'));
     return $this->running = true;
   }
 
@@ -646,13 +673,18 @@ h1 {font-family:tahoma,verdana,sans-serif;}
       list($request,$data)=$this->get_request();
       $this->process($request);
 
-      #socket_shutdown($this->child);
+      socket_shutdown($this->child);
       socket_close($this->child);
     } while(true);
   }
 
   function close() {
+    $this->running = false;
+    socket_shutdown($this->socket);
     socket_close ($this->socket);
+
+#    fclose($this->log_handle);
+#    fclose($this->error_handle);
   }
 } // end of simple_server
 
@@ -715,6 +747,19 @@ do {
     echo "socket_accept() failed: reason: ".socket_strerror($msgsock)."\n";
     break;
   }
+
+  socket_getpeername($child, $addr);
+
+  //$this->debug("Accepting connection from " . $addr);
+  echo "Accepting connection from " . $addr;
+
+  $pid = pcntl_fork();
+
+  if ($pid == -1) {
+    //$this->log_error("Could not fork for " . $addr);
+    echo "Could not fork for " . $addr;
+  } else if($pid == 0) {
+
   $httpd->child=$child;
  
   $options['timer']=new Timer();
@@ -767,7 +812,8 @@ do {
     $httpd->process($_SERVER);
   }
 
+  socket_shutdown($httpd->child);
   socket_close($httpd->child);
-  #socket_shutdown($httpd->child);
-} while(true);
-?> 
+  exit();
+  }
+} while($httpd->running);
